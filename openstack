#!/usr/bin/python
#
# Description: External STONITH module for openstack guests
#
# Author: Kim-Norman Sahm
# Email: kim-norman.sahm@o-s.de
# Licence: GPL
##################################################################

import sys
import os
from novaclient import client

global _debug
_debug = 0

argv = sys.argv
try:
    cmd = argv[1]
except IndexError:
    my_err("Not enough arguments")
    sys.exit(1)

xmlinfo = '''<parameters>
 <parameter name="openstack_instance" unique="1" required="1">
  <content type="string"/>
  <shortdesc lang="en">openstack instance name</shortdesc>
  <longdesc lang="en">
   Contains the openstack instance (vm) name
  </longdesc>
 </parameter>
<parameter name="openstack_username" unique="1" required="1">
  <content type="string"/>
  <shortdesc lang="en">openstack username</shortdesc>
  <longdesc lang="en">
   Contains the openstack username
  </longdesc>
 </parameter>
<parameter name="openstack_password" unique="1" required="1">
  <content type="string" default=""/>
  <shortdesc lang="en">openstack password</shortdesc>
  <longdesc lang="en">
   The password for the openstack user
  </longdesc>
 </parameter>
<parameter name="openstack_tenant" unique="1" required="1">
  <content type="string" default=""/>
  <shortdesc lang="en">openstack tenant (project) name</shortdesc>
  <longdesc lang="en">
   Contains the openstack tenant (project) name
  </longdesc>
 </parameter>
<parameter name="openstack_authurl" unique="1" required="1">
  <content type="string" default=""/>
  <shortdesc lang="en">openstack authentication url (Keystone url)</shortdesc>
  <longdesc lang="en">
   Contains the openstack authentication url.
   Example: https://mycloud.example.com:5000/v2.0/
  </longdesc>
 </parameter>
<parameter name="openstack_poweraction" unique="0" required="0">
  <content type="string" default="reset"/>
  <shortdesc lang="en">Openstack power action method</shortdesc>
  <longdesc lang="en">
   Options:
   * reboot - soft reboot the instance
   * reboot-force  - hard reboot the instance
   * stop - shutdown the instance
  </longdesc>
 </parameter>

</parameters>'''


info = {
        'getinfo-xml':      xmlinfo
}

if cmd in info:
    print info[cmd]
    sys.exit(0)

if cmd == 'getconfignames':
    for arg in [ "openstack_instance", "openstack_username", "openstack_password", "openstack_tenant", "openstack_authurl", "openstack_poweraction"]:
        print arg
    sys.exit(0)

instance = os.environ.get('openstack_instance').split("=")[1]
username = os.environ.get('openstack_username').split("=")[1]
password = os.environ.get('openstack_password').split("=")[1]
tenant = os.environ.get('openstack_tenant').split("=")[1]
authurl = os.environ.get('openstack_authurl').split("=")[1]
action =  os.environ.get('openstack_poweraction').split("=")[1]

if instance == "":
        print "ERROR - you must set a instance name"
        sys.exit(3)
elif username == "":
        print "ERROR - you must set your openstack username"
        sys.exit(3)
elif password == "":
        print "ERROR - you must set your openstack password"
        sys.exit(3)
elif tenant == "":
        print "ERROR - you must set your openstack tenant (project) name"
        sys.exit(3)
elif authurl == "":
        sys.exit(3)
        print "ERROR - you must set the authentication url (keystone url) from the openstack cloud"
        sys.exit(3)
elif action != "reboot" and action != "reboot-force" and action != "shutdown":
        print "ERROR - you must set a shutdown action (reboot, reboot-force or stop)"
        sys.exit(3)
#nova = client.Client(VERSION, USERNAME, PASSWORD, PROJECT_ID, AUTH_URL)
nova = client.Client(2, username, password, tenant, authurl)
found = 0
instances = nova.servers.list()
for vm in instances:
        if vm.name == instance:
                found = 1
                currentstatus = vm.status
                id = vm.id
                if _debug:
                        print "Found instance '" + instance +"' in tenant '" + tenant + "'"
                break
if found == 1:
       if _debug:
               print "Current state of instance '" + instance + "': " + currentstatus
else:
       print "ERROR - Cannot find any instance with name '" + instance + "'"
       sys.exit(3)

try:
       if action == "reboot":
                nova.servers.reboot(id,reboot_type='SOFT')
       elif action == "reboot-force":
                nova.servers.reboot(id,reboot_type='HARD')
       else:
                nova.servers.stop(id)
except:
        print "ERROR - Cannot shutdown instance '" + instance + "'"
        exit(4)




